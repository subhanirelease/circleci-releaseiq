version: 2.1

parameters:
  release_force_build:
    type: boolean
    default: true
  release_applications:
    type: string
    default: "release"
steps:
  - print:
    message: Printing << parameters.release_applications >>
    
jobs:
  build:
    docker:
      - image: circleci/openjdk:stretch
        auth:
          username: mydockerhub-user
          password: $DOCKERHUB_PASSWORD  # context / project UI env-var reference     
    steps:
      - checkout
      - run: ./mvnw -Dmaven.test.skip=true package
      - persist_to_workspace:
         root: ./
         paths:
           - target/

  deploy:
    docker:
      - image: circleci/openjdk:stretch
        auth:
          username: mydockerhub-user
          password: $DOCKERHUB_PASSWORD  # context / project UI env-var reference
    
    working_directory: /tmp
    steps:
      - run:
          name: Creating Dummy Artifacts
          command: |
            echo "{\"env\":\"dev\",\"path\":{\"adminBE\":\"doc/adminBE/v1\",\"adminUI\":\"doc/adminUI/v1\"}}" > /tmp/artifact-1;
            mkdir /tmp/artifacts;
            echo "my artifact files in a dir" > /tmp/artifacts/artifact-2;

      - store_artifacts:
          path: /tmp/artifact-1
          destination: artifact-file
          
  test:
    docker:
      - image: circleci/openjdk:stretch
        auth:
          username: mydockerhub-user
          password: $DOCKERHUB_PASSWORD  # context / project UI env-var reference     
    steps:
      - checkout
      - run: ./mvnw -Dmaven.test.skip=true package
      - persist_to_workspace:
         root: ./
         paths:
           - target/
           
  post_action:
    docker:
      - image: circleci/openjdk:stretch
        auth:
          username: mydockerhub-user
          password: $DOCKERHUB_PASSWORD  # context / project UI env-var reference     
    steps:
      - checkout
      - run: ./mvnw -Dmaven.test.skip=true package
      - persist_to_workspace:
         root: ./
         paths:
           - target/

workflows:
  version: 2

  release_workflow:
    when: << pipeline.parameters.release_force_build >>
    jobs:
      - build
      - deploy:
          requires:
            - build
      - test:
          requires:
            - deploy
      - post_action:
          requires:
            - test
  release_workflow1:
    jobs:
      - build
      - deploy:
          requires:
            - build
      - test:
          requires:
            - deploy
      - post_action:
          requires:
            - test
